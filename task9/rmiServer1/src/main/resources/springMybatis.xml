<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:sca="http://www.springframework.org/schema/sca"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/sca http://www.osoa.org/xmlns/sca/1.0/spring-sca.xsd">
    <!--基于注解实现aop-->
    <!--<context:component-scan base-package="com.yl.aop"/>-->
    <!--开启aop-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!-- 扫描service包下所有使用注解的类型 -->
    <context:annotation-config/>
    <context:component-scan base-package="com.yl.service.impl"/>
    <!-- 扫描包基础目录 -->
    <context:component-scan base-package="com.yl"></context:component-scan>

    <!-- 配置RMI开始 -->
    <!--<bean id="jobServiceImpl" class="com.yl.service.impl.JobServiceImpl"></bean>-->
    <!--<bean id="job" class="org.springframework.remoting.rmi.RmiServiceExporter">-->
        <!--<property name="serviceName" value="job"></property>-->
        <!--<property name="service" ref="jobServiceImpl"></property>-->
        <!--<property name="serviceInterface" value="com.yl.service.JobService"></property>-->
        <!--<property name="registryPort" value="1199"></property>-->
    <!--</bean>-->

    <!--<bean id="studentServiceImpl" class="com.yl.service.impl.StudentServiceImpl"></bean>-->
    <!--<bean id="student" class="org.springframework.remoting.rmi.RmiServiceExporter">-->
        <!--<property name="serviceName" value="student"></property>-->
        <!--<property name="service" ref="studentServiceImpl"></property>-->
        <!--<property name="serviceInterface" value="com.yl.service.StudentService"></property>-->
        <!--<property name="registryPort" value="1199"></property>-->
    <!--</bean>-->

    <!--<bean id="userServiceImpl" class="com.yl.service.impl.UserServiceImpl"></bean>-->
    <!--<bean id="user" class="org.springframework.remoting.rmi.RmiServiceExporter">-->
        <!--<property name="serviceName" value="user"></property>-->
        <!--<property name="service" ref="userServiceImpl"></property>-->
        <!--<property name="serviceInterface" value="com.yl.service.UserService"></property>-->
        <!--<property name="registryPort" value="1199"></property>-->
    <!--</bean>-->
    <!-- 配置RMI结束 -->
    <!--将关于 student 类发布为一个服务-->
    <sca:service name="studentService" type="com.yl.service.StudentService" target="studentServiceImpl"/>
    <bean id="studentServiceImpl" class="com.yl.service.impl.StudentServiceImpl"/>

    <!--将关于 job 类发布为一个RMI服务-->
    <sca:service name="jobService" type="com.yl.service.JobService" target="jobServiceImpl"/>
    <bean id="jobServiceImpl" class="com.yl.service.impl.JobServiceImpl"/>

    <!--将关于 job 类发布为一个RMI服务-->
    <sca:service name="userService" type="com.yl.service.UserService" target="userServiceImpl"/>
    <bean id="userServiceImpl" class="com.yl.service.impl.UserServiceImpl"/>



    <!--数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver"></property>
        <property name="jdbcUrl"
                  value="jdbc:mysql://127.0.0.1:3306/task7?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC"></property>
        <property name="user" value="root"></property>
        <property name="password" value="123456"></property>
    </bean>
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 别名 -->
        <property name="typeAliasesPackage" value="com.yl.entity"/>
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- sql映射文件路径 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>
    <!--自动扫描对象关系映射 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定要自动扫描接口的基础包，实现接口 -->
        <property name="basePackage" value="com.yl.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!--引入Redis配置文件-->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:redis.properties</value>
            </list>
        </property>
    </bean>

    <!-- jedis 连接池配置 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <property name="maxTotal" value="${redis.maxActive}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>

    <!-- 创建名为 springSessionRepositoryFilter 的Spring Bean，继承自Filter。
        springSessionRepositoryFilter替换容器默认的HttpSession支持为Spring Session，
        将Session实例存放在Redis中 -->
    <!--<bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration"/>-->
    <!-- redis连接工厂 -->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="poolConfig" ref="poolConfig"/>
        <property name="port" value="${redis.port}"/>
        <property name="hostName" value="${redis.host}"/>
        <property name="password" value="${redis.password}"/>
        <property name="timeout" value="${redis.timeout}"></property>
    </bean>
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean>
    <bean id="redisUtil" class="com.yl.utils.RedisUtil">
        <property name="redisTemplate" ref="redisTemplate"/>
    </bean>

  <!--容联短信验证-->
    <bean id="smsSDK" class="com.yl.utils.SMS">
        <constructor-arg name="serverIp" value="app.cloopen.com"></constructor-arg>
        <constructor-arg name="serverPort" value=""></constructor-arg>
        <constructor-arg name="accountSid" value=""></constructor-arg>
        <constructor-arg name="accountToken" value=""></constructor-arg>
        <constructor-arg name="appId" value=""></constructor-arg>
    </bean>

     <!--COS图片存储-->
    <bean id="cosClientUtil" class="com.yl.utils.CosClientUtil">
        <constructor-arg name="secretId" value=""></constructor-arg>
        <constructor-arg name="secretKey" value=""></constructor-arg>
        <constructor-arg name="address" value=""></constructor-arg>
        <constructor-arg name="bucketName" value=""></constructor-arg>
    </bean>

    <!--OSS图片存储-->
    <bean id="ossClientUtil" class="com.yl.utils.OssClientUtil">
        <constructor-arg name="endpoint" value=""></constructor-arg>
        <constructor-arg name="accessKeyId" value=""></constructor-arg>
        <constructor-arg name="accessKeySecret" value=""></constructor-arg>
        <constructor-arg name="bucketName" value=""></constructor-arg>
    </bean>

    <!--sendCloud邮箱验证-->
    <bean id="emailSending" class="com.yl.utils.SendEmail">
        <constructor-arg name="url" value= ""></constructor-arg>
        <constructor-arg name="apiUser" value=""></constructor-arg>
        <constructor-arg name="apiKey" value=""></constructor-arg>
        <constructor-arg name="from" value=""></constructor-arg>
    </bean>
</beans>
